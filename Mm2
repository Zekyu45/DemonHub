-- Script de t√©l√©portation automatique sur les pi√®ces avec auto-reset
-- Services n√©cessaires
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

-- Variables globales
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- Configuration
local TELEPORT_DELAY = 2 -- D√©lai en secondes entre chaque t√©l√©portation
local COIN_DETECTION_NAMES = {"Coin", "MainCoin", "CoinContainer", "Piece"} -- Noms possibles des pi√®ces
local SEARCH_DISTANCE = 1000 -- Distance maximale de recherche
local COLLECTION_CHECK_DELAY = 0.2 -- D√©lai pour v√©rifier si une pi√®ce a √©t√© collect√©e
local MAX_COINBAG_VALUE = 40 -- Valeur maximale du sac de pi√®ces (ajustez selon le jeu)

-- Variables de contr√¥le
local isRunning = false
local coinsList = {}
local currentCoinIndex = 1
local collectedCoins = {} -- Table pour suivre les pi√®ces d√©j√† collect√©es
local lastCoinBagValue = 0

-- Fonction pour obtenir la valeur actuelle du CoinBag
local function getCoinBagValue()
    local playerGui = player:FindFirstChild("PlayerGui")
    if not playerGui then return 0 end
    
    -- Chercher dans toutes les GUI possibles
    local function searchForCoinBag(parent)
        for _, child in pairs(parent:GetDescendants()) do
            if child:IsA("TextLabel") or child:IsA("TextButton") then
                local text = child.Text
                -- Chercher les patterns de sac de pi√®ces
                if string.find(text:lower(), "coinbag") or 
                   string.find(text:lower(), "coin") and string.find(text, "/") or
                   string.match(text, "%d+/%d+") then
                    
                    -- Extraire la valeur actuelle (avant le "/")
                    local current = string.match(text, "(%d+)")
                    if current then
                        return tonumber(current) or 0
                    end
                end
            end
        end
        return nil
    end
    
    local value = searchForCoinBag(playerGui)
    return value or 0
end

-- Fonction pour d√©tecter si le sac est plein
local function isCoinBagFull()
    local currentValue = getCoinBagValue()
    
    -- Si on trouve une valeur avec un pattern comme "20/20" ou similaire
    local playerGui = player:FindFirstChild("PlayerGui")
    if playerGui then
        for _, child in pairs(playerGui:GetDescendants()) do
            if child:IsA("TextLabel") or child:IsA("TextButton") then
                local text = child.Text
                -- Chercher le pattern "nombre/nombre"
                local current, max = string.match(text, "(%d+)/(%d+)")
                if current and max then
                    current = tonumber(current)
                    max = tonumber(max)
                    if current and max and current >= max then
                        print("üí∞ Sac de pi√®ces plein d√©tect√©:", current .. "/" .. max)
                        return true
                    end
                end
            end
        end
    end
    
    -- M√©thode alternative : si la valeur n'augmente plus apr√®s plusieurs collectes
    if currentValue >= MAX_COINBAG_VALUE then
        return true
    end
    
    return false
end

-- Fonction pour reset le personnage
local function resetCharacter()
    print("üîÑ Reset du personnage - Sac de pi√®ces plein!")
    if humanoid then
        humanoid.Health = 0
    end
    
    -- R√©initialiser les variables
    collectedCoins = {}
    coinsList = {}
    lastCoinBagValue = 0
    
    -- Attendre la respawn
    player.CharacterAdded:Wait()
    character = player.Character
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
    
    print("‚úÖ Personnage respawn√©, reprise de la collecte!")
end

-- Fonction pour v√©rifier si une pi√®ce est encore disponible/collectible
local function isCoinAvailable(coinObject)
    if not coinObject or not coinObject.Parent then
        return false
    end
    
    -- V√©rifier si cette pi√®ce a d√©j√† √©t√© marqu√©e comme collect√©e
    if collectedCoins[coinObject] then
        return false
    end
    
    -- V√©rifier si l'objet est visible et actif
    if coinObject:IsA("BasePart") then
        local isVisible = coinObject.Transparency < 1
        local hasValidPosition = coinObject.Position and coinObject.Position.Magnitude > 0
        return isVisible and hasValidPosition
    elseif coinObject:IsA("Model") then
        local hasVisibleParts = false
        for _, part in pairs(coinObject:GetChildren()) do
            if part:IsA("BasePart") and part.Transparency < 1 then
                hasVisibleParts = true
                break
            end
        end
        return hasVisibleParts
    end
    
    return false
end

-- Fonction pour marquer une pi√®ce comme collect√©e
local function markCoinAsCollected(coinObject)
    if coinObject then
        collectedCoins[coinObject] = true
    end
end

-- Fonction pour nettoyer les pi√®ces collect√©es de la m√©moire
local function cleanupCollectedCoins()
    local cleanedCoins = {}
    for coin, _ in pairs(collectedCoins) do
        if coin and coin.Parent then
            cleanedCoins[coin] = true
        end
    end
    collectedCoins = cleanedCoins
end

-- Fonction pour d√©tecter toutes les pi√®ces disponibles dans le workspace
local function detectCoins()
    local foundCoins = {}
    
    local function searchInDescendants(parent)
        for _, child in pairs(parent:GetDescendants()) do
            for _, coinName in pairs(COIN_DETECTION_NAMES) do
                if string.find(child.Name:lower(), coinName:lower()) then
                    if isCoinAvailable(child) then
                        if child:IsA("BasePart") and child.Position then
                            table.insert(foundCoins, {
                                object = child,
                                position = child.Position,
                                name = child.Name
                            })
                        elseif child:IsA("Model") then
                            local primaryPart = child.PrimaryPart
                            if primaryPart then
                                table.insert(foundCoins, {
                                    object = child,
                                    position = primaryPart.Position,
                                    name = child.Name
                                })
                            else
                                for _, part in pairs(child:GetChildren()) do
                                    if part:IsA("BasePart") then
                                        table.insert(foundCoins, {
                                            object = child,
                                            position = part.Position,
                                            name = child.Name
                                        })
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    
    searchInDescendants(Workspace)
    return foundCoins
end

-- Fonction pour t√©l√©porter le joueur √† une position avec Tween uniquement
local function teleportToPosition(position)
    if humanoidRootPart and position then
        local teleportPosition = Vector3.new(position.X, position.Y + 5, position.Z)
        
        -- Cr√©er un tween pour une t√©l√©portation fluide
        local tweenInfo = TweenInfo.new(
            0.5, -- Dur√©e
            Enum.EasingStyle.Quart,
            Enum.EasingDirection.Out,
            0, -- R√©p√©titions
            false, -- Reverse
            0 -- DelayTime
        )
        
        local tween = TweenService:Create(
            humanoidRootPart,
            tweenInfo,
            {CFrame = CFrame.new(teleportPosition)}
        )
        
        tween:Play()
        tween.Completed:Wait() -- Attendre que le tween soit termin√©
        
        print("üöÄ T√©l√©port√© avec tween √†:", teleportPosition)
    end
end

-- Fonction pour trier les pi√®ces par distance
local function sortCoinsByDistance(coins)
    if not humanoidRootPart then return coins end
    
    table.sort(coins, function(a, b)
        local distanceA = (a.position - humanoidRootPart.Position).Magnitude
        local distanceB = (b.position - humanoidRootPart.Position).Magnitude
        return distanceA < distanceB
    end)
    
    return coins
end

-- Fonction principale de t√©l√©portation automatique
local function startAutoTeleport()
    isRunning = true
    print("üéØ D√©marrage de la t√©l√©portation automatique avec auto-reset!")
    
    spawn(function()
        while isRunning do
            -- V√©rifier si le sac est plein avant de continuer
            if isCoinBagFull() then
                resetCharacter()
                task.wait(3) -- Attendre un peu apr√®s le reset
                continue
            end
            
            -- D√©tecter toutes les pi√®ces disponibles
            coinsList = detectCoins()
            
            if #coinsList > 0 then
                coinsList = sortCoinsByDistance(coinsList)
                print("üí∞ Pi√®ces disponibles d√©tect√©es:", #coinsList)
                
                for i, coinData in pairs(coinsList) do
                    if not isRunning then break end
                    
                    -- V√©rifier le sac avant chaque t√©l√©portation
                    if isCoinBagFull() then
                        print("üíº Sac plein d√©tect√© pendant la collecte!")
                        break
                    end
                    
                    if coinData.object and coinData.object.Parent and isCoinAvailable(coinData.object) then
                        teleportToPosition(coinData.position)
                        print("‚ú® T√©l√©port√© sur pi√®ce:", coinData.name)
                        
                        task.wait(COLLECTION_CHECK_DELAY)
                        
                        if not isCoinAvailable(coinData.object) then
                            markCoinAsCollected(coinData.object)
                            print("‚úÖ Pi√®ce collect√©e:", coinData.name)
                            
                            -- Afficher la valeur actuelle du sac
                            local bagValue = getCoinBagValue()
                            if bagValue > 0 then
                                print("üí∞ Sac de pi√®ces:", bagValue)
                            end
                        end
                        
                        task.wait(TELEPORT_DELAY - COLLECTION_CHECK_DELAY)
                    end
                    
                    if i % 3 == 0 then
                        print("üîÑ Re-d√©tection des nouvelles pi√®ces...")
                        cleanupCollectedCoins()
                        task.wait(0.5)
                        break
                    end
                end
            else
                print("üîç Aucune pi√®ce disponible, nouvelle recherche dans 2 secondes...")
                task.wait(2)
            end
            
            task.wait(0.5)
        end
    end)
end

-- Fonction pour arr√™ter la t√©l√©portation
local function stopAutoTeleport()
    isRunning = false
    collectedCoins = {}
    print("‚õî T√©l√©portation automatique arr√™t√©e.")
end

-- Gestion de la reconnexion du personnage
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
    print("üë§ Nouveau personnage d√©tect√©, red√©marrage du script...")
end)

-- Interface simple pour contr√¥ler le script
local function createControlGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CoinTeleportControl"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 250, 0, 120)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    frame.BorderSizePixel = 2
    frame.Parent = screenGui
    
    local startButton = Instance.new("TextButton")
    startButton.Size = UDim2.new(0, 110, 0, 30)
    startButton.Position = UDim2.new(0, 5, 0, 5)
    startButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    startButton.Text = "START"
    startButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    startButton.Parent = frame
    
    local stopButton = Instance.new("TextButton")
    stopButton.Size = UDim2.new(0, 110, 0, 30)
    stopButton.Position = UDim2.new(0, 125, 0, 5)
    stopButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    stopButton.Text = "STOP"
    stopButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    stopButton.Parent = frame
    
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, 0, 0, 25)
    statusLabel.Position = UDim2.new(0, 0, 0, 40)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "Status: Arr√™t√©"
    statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusLabel.Parent = frame
    
    local coinsLabel = Instance.new("TextLabel")
    coinsLabel.Size = UDim2.new(1, 0, 0, 25)
    coinsLabel.Position = UDim2.new(0, 0, 0, 65)
    coinsLabel.BackgroundTransparency = 1
    coinsLabel.Text = "Pi√®ces d√©tect√©es: 0"
    coinsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    coinsLabel.TextScaled = true
    coinsLabel.Parent = frame
    
    local bagLabel = Instance.new("TextLabel")
    bagLabel.Size = UDim2.new(1, 0, 0, 25)
    bagLabel.Position = UDim2.new(0, 0, 0, 90)
    bagLabel.BackgroundTransparency = 1
    bagLabel.Text = "Sac: 0"
    bagLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
    bagLabel.TextScaled = true
    bagLabel.Parent = frame
    
    -- √âv√©nements des boutons
    startButton.MouseButton1Click:Connect(function()
        if not isRunning then
            startAutoTeleport()
            statusLabel.Text = "Status: En cours (Auto-Reset)"
        end
    end)
    
    stopButton.MouseButton1Click:Connect(function()
        if isRunning then
            stopAutoTeleport()
            statusLabel.Text = "Status: Arr√™t√©"
        end
    end)
    
    -- Mise √† jour des labels
    spawn(function()
        while true do
            coinsLabel.Text = "Pi√®ces d√©tect√©es: " .. #coinsList
            
            local bagValue = getCoinBagValue()
            bagLabel.Text = "Sac: " .. bagValue
            
            -- Changer la couleur si le sac est presque plein
            if bagValue >= MAX_COINBAG_VALUE * 0.8 then
                bagLabel.TextColor3 = Color3.fromRGB(255, 100, 100) -- Rouge
            else
                bagLabel.TextColor3 = Color3.fromRGB(255, 255, 0) -- Jaune
            end
            
            task.wait(1)
        end
    end)
end

-- Initialisation
print("üöÄ Script de t√©l√©portation avec auto-reset charg√©!")
print("üìã Fonctionnalit√©s:")
print("   ‚Ä¢ T√©l√©portation par tween uniquement")
print("   ‚Ä¢ Auto-reset quand le sac de pi√®ces est plein")
print("   ‚Ä¢ Interface de contr√¥le")
print("   ‚Ä¢ D√©tection automatique des CoinBags")

-- Cr√©er l'interface de contr√¥le
createControlGUI()

-- D√©marrage automatique (d√©commentez si d√©sir√©)
-- startAutoTeleport()
