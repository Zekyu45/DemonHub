-- Script de collecte automatique de pi√®ces avec d√©placement naturel
-- Services n√©cessaires
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local PathfindingService = game:GetService("PathfindingService")

-- Variables globales
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- Configuration
local MOVEMENT_SPEED = 50 -- Vitesse de d√©placement (ajustable)
local COIN_DETECTION_NAMES = {"Coin", "MainCoin", "CoinContainer", "Piece"}
local SEARCH_DISTANCE = 1000
local COLLECTION_CHECK_DELAY = 0.5
local MOVEMENT_TYPE = "walk" -- "walk", "fly", ou "tween"

-- Variables de contr√¥le
local isRunning = false
local coinsList = {}
local collectedCoins = {}
local currentMovementTween = nil
local bodyVelocity = nil
local bodyPosition = nil

-- Fonction pour v√©rifier si une pi√®ce est encore disponible
local function isCoinAvailable(coinObject)
    if not coinObject or not coinObject.Parent then
        return false
    end
    
    if collectedCoins[coinObject] then
        return false
    end
    
    if coinObject:IsA("BasePart") then
        local isVisible = coinObject.Transparency < 1
        local hasValidPosition = coinObject.Position and coinObject.Position.Magnitude > 0
        return isVisible and hasValidPosition
    elseif coinObject:IsA("Model") then
        local hasVisibleParts = false
        for _, part in pairs(coinObject:GetChildren()) do
            if part:IsA("BasePart") and part.Transparency < 1 then
                hasVisibleParts = true
                break
            end
        end
        return hasVisibleParts
    end
    
    return false
end

-- Fonction pour marquer une pi√®ce comme collect√©e
local function markCoinAsCollected(coinObject)
    if coinObject then
        collectedCoins[coinObject] = true
    end
end

-- Fonction pour d√©tecter toutes les pi√®ces
local function detectCoins()
    local foundCoins = {}
    
    local function searchInDescendants(parent)
        for _, child in pairs(parent:GetDescendants()) do
            for _, coinName in pairs(COIN_DETECTION_NAMES) do
                if string.find(child.Name:lower(), coinName:lower()) then
                    if isCoinAvailable(child) then
                        if child:IsA("BasePart") and child.Position then
                            table.insert(foundCoins, {
                                object = child,
                                position = child.Position,
                                name = child.Name
                            })
                        elseif child:IsA("Model") then
                            local primaryPart = child.PrimaryPart
                            if primaryPart then
                                table.insert(foundCoins, {
                                    object = child,
                                    position = primaryPart.Position,
                                    name = child.Name
                                })
                            else
                                for _, part in pairs(child:GetChildren()) do
                                    if part:IsA("BasePart") then
                                        table.insert(foundCoins, {
                                            object = child,
                                            position = part.Position,
                                            name = child.Name
                                        })
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    
    searchInDescendants(Workspace)
    return foundCoins
end

-- Fonction pour trier les pi√®ces par distance
local function sortCoinsByDistance(coins)
    if not humanoidRootPart then return coins end
    
    table.sort(coins, function(a, b)
        local distanceA = (a.position - humanoidRootPart.Position).Magnitude
        local distanceB = (b.position - humanoidRootPart.Position).Magnitude
        return distanceA < distanceB
    end)
    
    return coins
end

-- Fonction pour arr√™ter le mouvement actuel
local function stopMovement()
    if currentMovementTween then
        currentMovementTween:Cancel()
        currentMovementTween = nil
    end
    
    if bodyVelocity then
        bodyVelocity:Destroy()
        bodyVelocity = nil
    end
    
    if bodyPosition then
        bodyPosition:Destroy()
        bodyPosition = nil
    end
    
    humanoid:MoveTo(humanoidRootPart.Position)
end

-- Fonction pour se d√©placer vers une position (marche)
local function walkToPosition(targetPosition)
    return new(Promise(function(resolve, reject)
        if not humanoidRootPart or not humanoid then
            reject("Personnage non disponible")
            return
        end
        
        humanoid:MoveTo(targetPosition)
        
        local connection
        local timeoutConnection
        
        -- Connexion pour d√©tecter quand on arrive
        connection = humanoid.MoveToFinished:Connect(function(reached)
            connection:Disconnect()
            if timeoutConnection then timeoutConnection:Disconnect() end
            
            if reached then
                resolve(true)
            else
                reject("Destination non atteignable")
            end
        end)
        
        -- Timeout de s√©curit√©
        timeoutConnection = task.delay(10, function()
            connection:Disconnect()
            reject("Timeout de d√©placement")
        end)
    end))
end

-- Fonction pour voler vers une position
local function flyToPosition(targetPosition)
    stopMovement()
    
    -- Cr√©er BodyPosition pour voler
    bodyPosition = Instance.new("BodyPosition")
    bodyPosition.MaxForce = Vector3.new(4000, 4000, 4000)
    bodyPosition.Position = targetPosition
    bodyPosition.D = 500 -- Damping
    bodyPosition.P = 3000 -- Power
    bodyPosition.Parent = humanoidRootPart
    
    print("Vol vers:", targetPosition)
end

-- Fonction pour se d√©placer avec un tween (mouvement fluide)
local function tweenToPosition(targetPosition)
    stopMovement()
    
    local distance = (targetPosition - humanoidRootPart.Position).Magnitude
    local duration = distance / MOVEMENT_SPEED
    
    local tweenInfo = TweenInfo.new(
        duration,
        Enum.EasingStyle.Linear,
        Enum.EasingDirection.InOut,
        0,
        false,
        0
    )
    
    currentMovementTween = TweenService:Create(
        humanoidRootPart,
        tweenInfo,
        {CFrame = CFrame.new(targetPosition)}
    )
    
    currentMovementTween:Play()
    
    print("Tween vers:", targetPosition)
    
    return currentMovementTween.Completed:Wait()
end

-- Fonction pour se d√©placer vers une position selon le mode s√©lectionn√©
local function moveToPosition(targetPosition)
    local safePosition = Vector3.new(targetPosition.X, targetPosition.Y + 5, targetPosition.Z)
    
    if MOVEMENT_TYPE == "walk" then
        return walkToPosition(safePosition)
    elseif MOVEMENT_TYPE == "fly" then
        flyToPosition(safePosition)
        -- Attendre d'√™tre proche de la cible
        while humanoidRootPart and (humanoidRootPart.Position - safePosition).Magnitude > 8 do
            task.wait(0.1)
        end
    elseif MOVEMENT_TYPE == "tween" then
        tweenToPosition(safePosition)
    end
end

-- Fonction principale de collecte automatique
local function startAutoCollection()
    isRunning = true
    print("D√©marrage de la collecte automatique de pi√®ces...")
    print("Mode de d√©placement:", MOVEMENT_TYPE)
    
    spawn(function()
        while isRunning do
            coinsList = detectCoins()
            
            if #coinsList > 0 then
                coinsList = sortCoinsByDistance(coinsList)
                print("Pi√®ces disponibles d√©tect√©es:", #coinsList)
                
                for i, coinData in pairs(coinsList) do
                    if not isRunning then break end
                    
                    if coinData.object and coinData.object.Parent and isCoinAvailable(coinData.object) then
                        print("D√©placement vers pi√®ce:", coinData.name)
                        
                        -- Se d√©placer vers la pi√®ce
                        local success = pcall(function()
                            moveToPosition(coinData.position)
                        end)
                        
                        if success then
                            -- Attendre un peu pour la collection
                            task.wait(COLLECTION_CHECK_DELAY)
                            
                            -- V√©rifier si collect√©e
                            if not isCoinAvailable(coinData.object) then
                                markCoinAsCollected(coinData.object)
                                print("‚úì Pi√®ce collect√©e:", coinData.name)
                            else
                                print("‚ö† Pi√®ce non collect√©e:", coinData.name)
                            end
                        else
                            print("‚ùå √âchec du d√©placement vers:", coinData.name)
                        end
                        
                        -- Pause entre les pi√®ces
                        task.wait(0.5)
                    end
                    
                    -- Re-d√©tecter p√©riodiquement
                    if i % 3 == 0 then
                        print("üîÑ Re-d√©tection des pi√®ces...")
                        task.wait(0.5)
                        break
                    end
                end
            else
                print("Aucune pi√®ce d√©tect√©e, nouvelle recherche...")
                task.wait(2)
            end
            
            task.wait(0.5)
        end
    end)
end

-- Fonction pour arr√™ter la collecte
local function stopAutoCollection()
    isRunning = false
    stopMovement()
    collectedCoins = {}
    print("Collecte automatique arr√™t√©e.")
end

-- Gestion de la reconnexion du personnage
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
    stopMovement()
    print("Nouveau personnage d√©tect√©.")
end)

-- Interface de contr√¥le am√©lior√©e
local function createControlGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CoinCollectorControl"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 250, 0, 150)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.Parent = screenGui
    
    -- Titre
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0, 25)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "Collecteur de Pi√®ces"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Parent = frame
    
    -- Boutons Start/Stop
    local startButton = Instance.new("TextButton")
    startButton.Size = UDim2.new(0, 70, 0, 25)
    startButton.Position = UDim2.new(0, 10, 0, 30)
    startButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
    startButton.Text = "START"
    startButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    startButton.Parent = frame
    
    local stopButton = Instance.new("TextButton")
    stopButton.Size = UDim2.new(0, 70, 0, 25)
    stopButton.Position = UDim2.new(0, 90, 0, 30)
    stopButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
    stopButton.Text = "STOP"
    stopButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    stopButton.Parent = frame
    
    -- S√©lecteur de mode de d√©placement
    local modeLabel = Instance.new("TextLabel")
    modeLabel.Size = UDim2.new(0, 50, 0, 20)
    modeLabel.Position = UDim2.new(0, 10, 0, 60)
    modeLabel.BackgroundTransparency = 1
    modeLabel.Text = "Mode:"
    modeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    modeLabel.TextScaled = true
    modeLabel.Parent = frame
    
    local walkButton = Instance.new("TextButton")
    walkButton.Size = UDim2.new(0, 50, 0, 20)
    walkButton.Position = UDim2.new(0, 65, 0, 60)
    walkButton.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    walkButton.Text = "Marche"
    walkButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    walkButton.TextScaled = true
    walkButton.Parent = frame
    
    local flyButton = Instance.new("TextButton")
    flyButton.Size = UDim2.new(0, 50, 0, 20)
    flyButton.Position = UDim2.new(0, 120, 0, 60)
    flyButton.BackgroundColor3 = Color3.fromRGB(255, 150, 0)
    flyButton.Text = "Vol"
    flyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    flyButton.TextScaled = true
    flyButton.Parent = frame
    
    local tweenButton = Instance.new("TextButton")
    tweenButton.Size = UDim2.new(0, 50, 0, 20)
    tweenButton.Position = UDim2.new(0, 175, 0, 60)
    tweenButton.BackgroundColor3 = Color3.fromRGB(150, 0, 255)
    tweenButton.Text = "Tween"
    tweenButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    tweenButton.TextScaled = true
    tweenButton.Parent = frame
    
    -- Contr√¥le de vitesse
    local speedLabel = Instance.new("TextLabel")
    speedLabel.Size = UDim2.new(0, 60, 0, 20)
    speedLabel.Position = UDim2.new(0, 10, 0, 85)
    speedLabel.BackgroundTransparency = 1
    speedLabel.Text = "Vitesse: " .. MOVEMENT_SPEED
    speedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    speedLabel.TextScaled = true
    speedLabel.Parent = frame
    
    local speedSlider = Instance.new("TextBox")
    speedSlider.Size = UDim2.new(0, 50, 0, 20)
    speedSlider.Position = UDim2.new(0, 75, 0, 85)
    speedSlider.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    speedSlider.Text = tostring(MOVEMENT_SPEED)
    speedSlider.TextColor3 = Color3.fromRGB(255, 255, 255)
    speedSlider.TextScaled = true
    speedSlider.Parent = frame
    
    -- Labels de statut
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, 0, 0, 20)
    statusLabel.Position = UDim2.new(0, 0, 0, 110)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "Status: Arr√™t√© | Mode: " .. MOVEMENT_TYPE
    statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusLabel.TextScaled = true
    statusLabel.Parent = frame
    
    local coinsLabel = Instance.new("TextLabel")
    coinsLabel.Size = UDim2.new(1, 0, 0, 20)
    coinsLabel.Position = UDim2.new(0, 0, 0, 125)
    coinsLabel.BackgroundTransparency = 1
    coinsLabel.Text = "Pi√®ces d√©tect√©es: 0"
    coinsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    coinsLabel.TextScaled = true
    coinsLabel.Parent = frame
    
    -- Fonction pour mettre √† jour l'affichage des modes
    local function updateModeDisplay()
        walkButton.BackgroundColor3 = MOVEMENT_TYPE == "walk" and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 150, 255)
        flyButton.BackgroundColor3 = MOVEMENT_TYPE == "fly" and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 150, 0)
        tweenButton.BackgroundColor3 = MOVEMENT_TYPE == "tween" and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(150, 0, 255)
        statusLabel.Text = "Status: " .. (isRunning and "En cours" or "Arr√™t√©") .. " | Mode: " .. MOVEMENT_TYPE
    end
    
    -- √âv√©nements des boutons
    startButton.MouseButton1Click:Connect(function()
        if not isRunning then
            startAutoCollection()
            updateModeDisplay()
        end
    end)
    
    stopButton.MouseButton1Click:Connect(function()
        if isRunning then
            stopAutoCollection()
            updateModeDisplay()
        end
    end)
    
    walkButton.MouseButton1Click:Connect(function()
        MOVEMENT_TYPE = "walk"
        updateModeDisplay()
    end)
    
    flyButton.MouseButton1Click:Connect(function()
        MOVEMENT_TYPE = "fly"
        updateModeDisplay()
    end)
    
    tweenButton.MouseButton1Click:Connect(function()
        MOVEMENT_TYPE = "tween"
        updateModeDisplay()
    end)
    
    speedSlider.FocusLost:Connect(function()
        local newSpeed = tonumber(speedSlider.Text)
        if newSpeed and newSpeed > 0 and newSpeed <= 200 then
            MOVEMENT_SPEED = newSpeed
            speedLabel.Text = "Vitesse: " .. MOVEMENT_SPEED
            if humanoid then
                humanoid.WalkSpeed = MOVEMENT_SPEED
            end
        else
            speedSlider.Text = tostring(MOVEMENT_SPEED)
        end
    end)
    
    -- Mise √† jour p√©riodique
    spawn(function()
        while true do
            coinsLabel.Text = "Pi√®ces d√©tect√©es: " .. #coinsList
            task.wait(1)
        end
    end)
    
    updateModeDisplay()
end

-- Initialisation
print("=== Collecteur de Pi√®ces Am√©lior√© ===")
print("Modes disponibles:")
print("- Marche: Utilise le syst√®me de pathfinding naturel")
print("- Vol: Vole directement vers les pi√®ces")
print("- Tween: Mouvement fluide et contr√¥l√©")
print("=====================================")

createControlGUI()

-- Fonctions globales pour contr√¥le manuel
_G.startCollection = startAutoCollection
_G.stopCollection = stopAutoCollection
_G.setMovementType = function(type)
    if type == "walk" or type == "fly" or type == "tween" then
        MOVEMENT_TYPE = type
        print("Mode de d√©placement chang√©:", type)
    end
end
